struct stat;
struct rtcdate;

// system calls
int fork(void);
int exit(void) __attribute__((noreturn));
int wait(void);
int pipe(int*);
int write(int, const void*, int);
int read(int, void*, int);
int close(int);
int kill(int);
int exec(char*, char**);
int open(const char*, int);
int mknod(const char*, short, short);
int unlink(const char*);
int fstat(int fd, struct stat*);
int link(const char*, const char*);
int mkdir(const char*);
int chdir(const char*);
int dup(int);
int getpid(void);
char* sbrk(int);
int sleep(int);
int uptime(void);
int halt(void);
int toggle(void);
int print_count(void);
int add(int, int);
int ps(void);
int send(int, int, char *);
int recv(char *);
int registerhandler(int, int);
int send_multi(int, int, int *, char*);
int recvmulti(char *);
int samplecall(int*, void *);
int create_container(int);
int join_container(int);
int scheduler_call(void);
int leave_container(void);
int destroy_container(int);
int registerState(int, int*, int*,int*, int*, int*, int *,char *,int *, int*, int*, int*);
int registerSysCall(int);
int getStatusSysCall(void);
int getfd(int*);
int cat_sys(char*);
int ls_sys(void);
int malloc_sys(int *);
int getmallocaddr_sys(int *);
int writemalloc_sys(int *, int *);
int readmalloc_sys(int *);
int readvalmalloc_sys(int *);
int toggle_log(int *);

// ulib.c
int stat(const char*, struct stat*);
char* strcpy(char*, const char*);
void *memmove(void*, const void*, int);
char* strchr(const char*, char c);
int strcmp(const char*, const char*);
void printf(int, const char*, ...);
char* gets(char*, int max);
uint strlen(const char*);
void* memset(void*, int, uint);
void* malloc(uint);
void free(void*);
int atoi(const char*);
